#!/bin/bash
# Slax management and control script
# Author: Tomas M <http://www.slax.org/>

# TODO: lock by creating a directory to allow only single run of this script?

LIVE=/mnt/live/memory
COMMAND="$1"
PARAM="$2"
TARGET="$3"
LASTDOWNLOAD=""
GUI=${GUI:-""}
AUTODEPS=${AUTODEPS:-""}
SILENT=${SILENT:-""}
SYSTRAY=${SYSTRAY:-""}

if [ "$(echo "$1" | egrep "^activate://")" != "" ]; then
   COMMAND="activate"
   PARAM="$(echo "$1" | cut -b 12-)"
   GUI="true"
   AUTODEPS="true"
fi

if [ "$(echo "$1" | egrep "^deactivate://")" != "" ]; then
   COMMAND="deactivate"
   PARAM="$(echo "$1" | cut -b 14-)"
   GUI="true"
fi

if [ "$(echo "$1" | egrep "^download://")" != "" ]; then
   COMMAND="download"
   PARAM="$(echo "$1" | cut -b 12-)"
   TARGET="$HOME"
   GUI="true"
fi

if [ "$GUI" -a "$SYSTRAY" = "" ]; then
   exec ksystraycmd --ownicon --icon preferences-web-browser-cache --tooltip "in progress: slax $COMMAND $PARAM $TARGET" \
   SYSTRAY=true SILENT=$SILENT GUI=$GUI AUTODEPS=$AUTODEPS \
   slax "$COMMAND" "$PARAM" "$TARGET"
fi

PARAMREG="$(echo "$PARAM" | sed -r "s/[+]/[+]/g")"


# Usage info
#
usage()
{
    echo "Control script v1.0 for Slax. Provides way for obtaining new software,"
    echo "downloading and uploading Slax build scripts to Slax server, and more."
    echo ""
    echo "Usage:"
    echo ""
    echo "     # slax buildscript [ options ]"
    echo "     # slax [ options ]"
    echo ""
    echo "Explanation:"
    echo ""
    echo "     # slax buildscript [ options]:"
    echo ""
    echo "          # slax buildscript download template"
    echo "             - download fresh empty template for build script from Slax server"
    echo "             - it includes all the infos you need to make Slax bundles"
    echo ""
    echo "          # slax buildscript download [ name ]"
    echo "             - download build script for given bundle name from Slax server"
    echo ""
    echo "          # slax buildscript upload [ filename ]"
    echo "             - upload your build script to Slax server"
    echo ""
    echo "          # slax buildscript update [ filename ]"
    echo "             - update existing build script on Slax server using by file"
    echo ""
    echo "          # slax buildscript delete name"
    echo "             - delete given build script (including packages) from Slax server"
    echo ""
    echo "     # slax [ options ]"
    echo ""
    echo "          # slax search [ keyword  [ keyword ... ] ]"
    echo "             - search for keywords on Slax server, list Slax bundles which match"
    echo ""
    echo "          # slax info [ name ]"
    echo "             - print info about given Slax bundle"
    echo "             - if no name is provided, print info about activated bundles"
    echo ""
    echo "          # slax download [ name ] [ dir ]"
    echo "             - download Slax bundle [ name ] and save it in directory [ dir ]"
    echo "             - if [ dir ] is not specified, save the download to current directory"
    echo ""
    echo "          # slax activate [ name | filename ]"
    echo "             - activate Slax Bundle given by filename (already downloaded), or"
    echo "             - download and activate the bundle given by name from Slax server"
    echo ""
    echo "          # slax deactivate [ name ]"
    echo "             - deactivate given Slax bundle"
    echo "               (detach from filesystem, but keep downloaded file)"
    echo ""
    echo "Remarks:"
    echo "     [ name ] has to be the unique name of slax bundle, without .sb extension"
    echo "     [ filename ] has to be real file on filesystem, with .sb extension"

    if [ "$1" != "" ]; then
       echo
       echo "--"
       echo "Error: $1"
       if [ "$GUI" ]; then
          die "Error: $1"
       fi
    fi
    exit 1
}

F1=/tmp/slax-$$-in.tmp
F2=/tmp/slax-$$-out.tmp
trap "rm -f $F1 $F2" EXIT

# Function to ask user for password. If optional argument $1 is given,
# repeat asking for the same password again
# $1 = repeat (empty = no repeat)
#
get_password()
{
   local PASS1 PASS2 MSG

   if [ "$1" = "" ]; then
      MSG="Enter"
   else
      MSG="Create"
   fi

   echo -ne "$MSG password: " >&2
   read -s PASS1
   echo >&2

   if [ "$1" != "" ]; then
      echo -ne "Retype password again: " >&2
      read -s PASS2
      echo >&2

      if [ "$PASS1" != "$PASS2" ]; then
         echo "Passwords do not match" >&2
         exit 3
      fi
   fi

   if [ "$PASS1" = "" ]; then
      echo "Password can't be empty" >&2
      exit 4
   fi
   echo "$PASS1"
}


# Print error message and exit
# $1 = error message
#
die()
{
   echo "$1" >&2
   if [ "$GUI" = "true" ]; then
      kdialog --caption "Error" --error "$1" >/dev/null 2>&1
   fi
   exit 10
}

# Print question and return answer
# $1 = question message
#
question()
{
   local RET JUNK

   echo >&2
   echo -ne "$1 [yes/no]: " >&2
   if [ "$GUI" = "true" ]; then
      kdialog --caption "Question" --yesno "$1" >/dev/null 2>&1
      RET=$?
   else
      read JUNK
      if [ "$JUNK" = "Y" -o "$JUNK" = "y" -o "$JUNK" = "yes" -o "$JUNK" = "YES" ]; then
         RET=0
      else
         RET=1
      fi
   fi

   echo "$RET"
}

# return file size
# $1 = file whose size we are after
file_size()
{
   stat --printf "%s" "$1" 2>/dev/null
   if [ $? -ne 0 ]; then
      echo '-1'
   fi
}

# download url and show progress
# $1 = message to display
# $2 = url to download
# $3 = target file to store the download
#
wget_progress()
{
   local dbusRef TGT
   TGT="$3/$(basename "$2")"

   if [ -r "$TGT" ]; then
      die "Cannot overwrite existing file $TGT"
   fi

   if [ "$GUI" ]; then
      dbusRef="$(kdialog --icon draw-arrow-down --caption "Download in progress" --progressbar "\\n$1            " 100 2>/dev/null)"
      qdbus $dbusRef Set "" value 0 >/dev/null 2>&1
      qdbus $dbusRef showCancelButton true >/dev/null 2>&1
   fi

   wget --progress=dot -O "$TGT" "$2" 2>&1 | fgrep --line-buffered '%' | sed -u -r 's:.*[ .]([0-9]+)% .*:\1:' \
        | while read LINE; do
           if [ "$dbusRef" != "" ]; then
              qdbus $dbusRef Set "" value "$LINE" >/dev/null 2>&1
              if [ "$(qdbus $dbusRef wasCancelled 2>&1 | egrep 'true|does not exist')" != "" ]; then
                 rm -f "$TGT"
                 exit 7
              fi
           else
              echo -ne "\r$LINE% done"
           fi
        done

   if [ "$(file_size "$TGT")" -eq 0 ]; then
      rm -f "$TGT"
   fi

   if [ "$GUI" ]; then
      qdbus $dbusRef close 2>/dev/null
   fi

   echo

   if [ -r "$TGT" ]; then
      export LASTDOWNLOAD="$TGT"
   else
      return 1
   fi
}


# encode parameter so it can be passed in URL
# $1 = data to encode
#
urlencode()
{
   local DATA ORD
   DATA="$1"

   while [ "$DATA" != "" ]; do
      LETTER=${DATA:0:1}
      LC_CTYPE=C printf -v ORD '%d' "'$LETTER"
      if [ $ORD -ge 48 -a $ORD -le 57 -o $ORD -ge 65 -a $ORD -le 90 -o $ORD -ge 97 -a $ORD -le 122 ]; then
         echo -n $LETTER
      else
         echo -n "%"
         if [ $ORD -le 15 ]; then
            echo -n "0"
         fi
         LC_CTYPE=C printf '%x' $ORD
      fi
      DATA=${DATA:1}
   done
}


# Return infos about current Slax (architecture, version, etc)
# so the server can decide what precompiled bundle to send
#
infos()
{
   echo "arch=$(urlencode "$(uname -m)")&version=$(urlencode "$(cat /etc/slax-version 2>/dev/null)")&ram=$(urlencode "$(free | awk '/Mem:/ {print $2}')")&cmdline=$(urlencode "$(cat /proc/cmdline)")"
}


# perform HTTP GET (it's actually a post, but servers as get)
# $1 = url parameters
# $2 = password request (no request for password if empty)
#
get()
{
   local PASS INFOS

   echo "$1" > $F1
   if [ "$2" != "" ]; then
      PASS="$(get_password)" || exit
      PASS="$(urlencode "$PASS")"
   fi

   INFOS=$(infos)

   wget -q -O $F2 --post-file $F1 "https://www.slax.org/slaxcs.php?action=get&$INFOS&pass=$PASS"
   if [ $? -ne 0 ]; then
      echo "Error: Download error. Check your network connection."
   fi
}


# perform HTTP POST, ask for password for given operation
# $1 = url parameter (upload, update, delete)
# $2 = input file
# $3 = password input repeat (empty = no repeat)
#
post()
{
   local PASS INFOS

   if [ ! -r "$2" ]; then
      echo "File not found $2" >&2
      exit 2
   fi

   PASS=$(get_password $3) || exit
   PASS="$(urlencode "$PASS")"
   INFOS=$(infos)

   wget -q -O $F2 --post-file "$2" "https://www.slax.org/slaxcs.php?action=$1&$INFOS&pass=$PASS"
   if [ $? -ne 0 ]; then
      echo "Error: Upload error. Check your network connection."
   fi
}


# Process output file which is response from server
# If the output contains URL, it will be saved to dir $1
# The non-url part of the response file is message for user
# so we'll simply display it.
# If message from server begins with "Error:", exit 1
# $1 = directory where to save
#
process()
{
   local URL MSG

   URL="$(cat "$F2" 2>/dev/null | egrep 'https?://')"

   if [ "$URL" != "" -a "$1" != "" ]; then
      echo "Downloading $(basename "$URL") ..."
      wget_progress "Downloading Slax bundle $(basename "$URL")" "$URL" "$1"
      if [ $? -ne 0 ]; then
         die "Error: Download error. Check your network connection."
      fi
   fi

   if [ $? -eq 0 ]; then
      MSG="$(cat "$F2" 2>/dev/null | egrep -vi 'https?://')"
      if [ "$(echo "$MSG" | egrep "^Error:")" != "" ]; then
         die "$MSG"
      else
         echo "$MSG"
      fi
   fi
}


# Check if parameter is empty. If yes, print error and exit
# $1 = parameter
# $2 = message is empty
#
need()
{
   if [ "$1" = "" ]; then
      usage "$2"
   fi
}

# returns writable directory outside of AUFS root
# where Slax Bundle can be safely stored
#
get_bundle_storage_dir()
{
   local TGT

   TGT=$LIVE/data/slax/modules

   mkdir -p $TGT 2>/dev/null
   touch $TGT/.empty 2>/dev/null && rm $TGT/.empty 2>/dev/null
   if [ $? -ne 0 ]; then
      TGT=$LIVE/modules
      mkdir -p $TGT
   fi

   echo $TGT
}

# cat the requires file and return deps which are really missing
# $1 = path to requires file
#
missing_deps()
{
   local REQ EX

   EX="$(print_branches | cut -f 2 | sed -r "s:.*/([0-9]+-)?|[.]sb::")"     #"

   for REQ in $(cat "$1" 2>/dev/null | sed -r "s:[+]:[+]:"); do
      if ! echo "$EX" | egrep -q "\\b$REQ\\b"; then
         echo -n "$REQ "
      fi
   done
}


# Activate Slax Bundle
# $1 = file to activate
#
activate()
{
   local SB TGT BAS Q DEPS DEPSCOUNT i

   SB="$(readlink -f "$1")"
   BAS="$(basename "$SB")"

   # check if file exists
   if [ ! -r "$SB" ]; then
      usage "file not found $SB"
   fi

   # check if file is in aufs union - if yes, move outside
   if [ -r "$LIVE/changes/$SB" ]; then
      TGT="$(get_bundle_storage_dir)"
      echo "File stored inside Slax filesystem couldn't be activated, moving to $TGT, then activating from there"
      mv -n "$SB" "$TGT/$BAS"
      if [ $? -ne 0 ]; then
         die "Error moving Slax bundle to $TGT/$BAS. Not enough space or target already exists"
      fi
      SB="$TGT/$BAS"
   fi

   # check if this particular file is already activated
   if print_branches | cut -f 2 | fgrep -q "$SB"; then
      Q="$(question "Slax bundle already active: $BAS\nDeactivate it now?")"
      if [ "$Q" = "0" ]; then # yes
         deactivate "$1"
      fi
      exit # module remains active or was deactivated
   fi

   # mount remount,add
   TGT="$LIVE/bundles/$BAS"
   mkdir -p "$TGT"

   mount -n -o loop,ro "$SB" "$TGT"
   if [ $? -ne 0 ]; then
      die "Error mounting of the bundle, perhaps corrupted download"
   fi

   # activate required bundles
   DEPS="$(missing_deps $TGT/run/requires)"
   DEPSCOUNT="$(echo $DEPS | wc -w)"
   if [ "$DEPS" != "" ]; then
      if [ "$AUTODEPS" = "true" ]; then Q="0"; else Q="1"; fi
      if [ "$AUTODEPS" = "" ]; then
         Q="$(question "$BAS requires $DEPSCOUNT additional bundles to run properly.\n$DEPS\nDownload and activate them now?")"
      fi
      if [ "$Q" = "0" ]; then # yes
         for i in $DEPS; do
            GUI=$GUI SILENT=true AUTODEPS=true SYSTRAY=$SYSTRAY slax activate $i
         done
      fi
   fi

   # add current branch to aufs union
   mount -t aufs -o remount,add:1:"$TGT" aufs /
   if [ $? -ne 0 ]; then
      umount "$TGT"
      rmdir "$TGT"
      die "Error attaching bundle filesystem to Slax"
   fi

   if [ "$(find "$TGT/usr/share/applications/" -name "*.desktop" -type f 2>/dev/null)" != "" ]; then
      kbuildsycoca4 >/dev/null 2>&1
   fi

   echo "Slax Bundle activated: $BAS"

   if [ -r "$TGT/run/activate.sh" ]; then
      echo "Executing post-activation script..."
      sh "$TGT/run/activate.sh"
   fi

   if [ "$GUI" -a ! "$SILENT" ]; then
      kdialog --title " " --passivepopup "Slax bundle activated:\n$BAS" 2 2>/dev/null
   fi
}


# Deactivate Slax bundle of the given name
# $1 = path to bundle file, or its name
#
deactivate()
{
   local BUNDLES SB MATCH LOOP LOOPFILE

   BUNDLES=$LIVE/bundles
   MODULES=$LIVE/modules
   SB="$(basename "$1")"

   rmdir "$BUNDLES/$SB" 2>/dev/null    # this fails unless the dir is
   rmdir "$BUNDLES/$SB.sb" 2>/dev/null # forgotten there empty. It's safe this way

   if [ ! -d "$BUNDLES/$SB" ]; then
      # we don't have real filename match, lets try to add .sb extension
      if [ ! -d "$BUNDLES/$SB.sb" ]; then
         # no, still no match. Lets use some guesswork
         SB=$(print_branches | cut -f 2 | egrep -o "/[0-9]+-$SB.sb\$" | tail -n 1 | xargs -r basename)
      else
         SB="$SB.sb"
      fi
   fi

   if [ "$SB" = "" -o ! -d "$BUNDLES/$SB" ]; then
      die "can't find active slax bundle $1"
   fi

   if [ -r "$BUNDLES/$SB/run/deactivate.sh" ]; then
      echo "Executing bundle's deactivate script ..."
      sh "$BUNDLES/$SB/run/deactivate.sh"
   fi

   echo "Attempting to deactivate Slax bundle $SB..."
   mount -t aufs -o remount,verbose,del:"$BUNDLES/$SB" aufs / 2>/dev/null
   if [ $? -ne 0 ]; then
      die "Unable to deactivate Slax Bundle - still in use. See dmesg for more."
   fi

   # remember what loop device was the bundle mounted to, it may be needed later
   LOOP="$(cat /proc/mounts | fgrep " $BUNDLES/$SB " | cut -d " " -f 1)"
   LOOPFILE="$(losetup "$LOOP" | cut -d " " -f 3 | sed -r 's:^.|.$::g')"

   umount "$BUNDLES/$SB" 2>/dev/null
   if [ $? -ne 0 ]; then
      die "Unable to umount Slax bundle loop-mount $BUNDLES/$SB"
   fi
   rmdir "$BUNDLES/$SB"

   # free the loop device manually since umount fails to do that if the bundle was activated on boot
   losetup -d "$LOOP" 2>/dev/null

   # remove the .sb file, but keep it if deactivate was issued on full sb real path
   if [ "$(realpath "$1")" != "$(realpath "$LOOPFILE")" ]; then
      rm -f "$LOOPFILE"
   fi

   echo "Slax Bundle deactivated: $SB"
   if [ "$GUI" ]; then
      kdialog --title " " --passivepopup "Slax Bundle deactivated: $SB" 2 2>/dev/null
   fi
}

print_branches()
{
   local SI BUNDLE LOOP CWD

   SI="/sys/fs/aufs/$(cat /proc/mounts | grep 'aufs / aufs' | egrep -o 'si=([^,) ]+)' | tr = _)"
   CWD="$(pwd)"
   cd "$SI"
   ls -v1 | grep -v xi_path | egrep 'br[0-9]+' | xargs cat | grep memory/bundles | rev | cut -b 4- | rev | while read BUNDLE; do
      if mountpoint -q "$BUNDLE"; then
         LOOP=$(cat /proc/mounts | fgrep " $BUNDLE squashfs" | cut -d " " -f 1)
         echo -n "$BUNDLE"
         echo -ne "\t"
         losetup $LOOP | sed -r "s:.*[(]|[)].*::g"
      fi
   done | tac
   cd "$CWD"
}

print_active_bundle_ids()
{
   print_branches | cut -f 1 | sed -r "s:^$LIVE/bundles/::" | sed -r 's:[^0-9]+.*:/:'
}


case "$COMMAND" in
   'buildscript')

      case "$PARAM" in
         'download')
            need "$TARGET" "missing buildscript name"
            get "$COMMAND $PARAM $TARGET"
            process "$(pwd)" || exit 1
            if [ "$LASTDOWNLOAD" != "" ]; then
               chmod a+x "$LASTDOWNLOAD"
            fi
         ;;
         'upload')
            need "$TARGET" "missing buildscript file"
            post "$PARAM" "$TARGET" 2
            process || exit 1
         ;;
         'update')
            need "$TARGET" "missing buildscript file"
            post "$PARAM" "$TARGET"
            process || exit 1
         ;;
         'delete')
            need "$TARGET" "missing buildscript name"
            get "$COMMAND $PARAM $TARGET" 1
            process || exit 1
         ;;
         *)
            usage
         ;;
      esac
   ;;

   'search')
      need "$PARAM" "missing search keyword"
      get "$COMMAND $PARAM $TARGET $4 $5 $6 $7 $8 $9"
      process
   ;;

   'info')
      if [ "$PARAM" = "" ]; then
         print_branches
      else
         get "$COMMAND $PARAM"
         process
      fi
   ;;

   'download')
      need "$PARAM" "missing Slax Bundle name"
      if [ "$TARGET" = "" ]; then TARGET="."; fi
      get "$COMMAND $PARAM"
      process "$TARGET"

      if [ "$GUI" -a "$LASTDOWNLOAD" != "" ]; then
         kdialog --title " " --passivepopup "Slax bundle downloaded to $LASTDOWNLOAD" 2 2>/dev/null
      fi
   ;;

   'activate')
      if [ ! -r "$PARAM" ]; then
         TGT="$(print_branches | cut -f 2 | egrep -o "/(([0-9]+-)?$PARAMREG(.sb)?\$)")"  #"
         if [ "$TGT" != "" ]; then
            if [ "$SILENT" = "" ]; then
               die "Slax bundle is already active as $(echo $TGT | tr -d /)"
            fi
            exit
         fi
         get "download $PARAM"
         process "$(get_bundle_storage_dir)"
         if [ -r "$LASTDOWNLOAD" ]; then
            activate "$LASTDOWNLOAD"
         fi
      else
         activate "$PARAM"
      fi
   ;;

   'deactivate')
      deactivate "$PARAM"
   ;;

   'scinfo')
      echo "[$(cat /etc/slax-version)]"
      print_active_bundle_ids
   ;;

   *)
      usage
   ;;
esac
