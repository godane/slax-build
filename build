#!/bin/bash

SLAXVERSION="7.0.6"

if [ "$(uname -m)" = "x86_64" ]; then
   SLACKWARE=/mnt/d/slackware/slackware64-current/slackware64/
   SLAX=/mnt/d/slax/packages/64bit
   LIBSUFFIX=64
   export SLAXVERSION="Slax $SLAXVERSION 64bit"
else
   SLACKWARE=/mnt/d/slackware/slackware-current/slackware/
   SLAX=/mnt/d/slax/packages/32bit
   LIBSUFFIX=
   export SLAXVERSION="Slax $SLAXVERSION 32bit"
fi

EMPTY=/tmp/slax-empty
UNION=/tmp/slax-union

XPIDIR=/mnt/d/slax/packages/xpi
L10NDIR=/mnt/d/slax/packages/l10n

umount $UNION 2>/dev/null
rm -Rf $UNION
mkdir -p $UNION

umount $EMPTY 2>/dev/null
rm -Rf $EMPTY
mkdir -p $EMPTY

# Install pakcage from Slackware pkg tree
# $1 = package name to install
# $2 = source tree to search for package
# $3 = target root
#
sinstall()
{
   local PKG
   PKG="$(find "$2" -noleaf | egrep "/$1-[^-]+-[^-]+-[^-]+[.]t[gx]z\$" | head -n 1)"

   if [ "$PKG" = "" ]; then
      echo -ne "\\nError! Package $1 not found!\\n"
   else
      echo Installing $PKG
      installpkg -root "$3" "$PKG"
   fi
}

# remove files which are already installed in $1
# so the module won't include duplicated files
# $1 = original files root (source for comparing)
# $2 = new files root, remove duplicates from here
#
function remove_duplicites()
{
   find "$2" -noleaf | while read DUPLICATE; do
      ORIGFILE=$1/"${DUPLICATE:$((${#2}+1))}"
      if [ "$DUPLICATE" = "$ORIGFILE" ]; then continue; fi

      # if one file is a symlink and the other one is not, don't delete anything
      if [ -h "$DUPLICATE" -a ! -h "$ORIGFILE" ]; then continue; fi
      if [ ! -h "$DUPLICATE" -a -h "$ORIGFILE" ]; then continue; fi

      # a symlink pointing to the same location can be removed
      if [ -h "$DUPLICATE" -a -h "$ORIGFILE" ]; then
         if [ "$(readlink "$DUPLICATE")" = "$(readlink $ORIGFILE)" ]; then
            rm -v "$DUPLICATE"
            rmdir --ignore-fail-on-non-empty "$(dirname $DUPLICATE)"
            continue
         fi
      fi

      # existing files will be tested for UID and diff'ed
      if [ ! -d "$DUPLICATE" -a -a "$ORIGFILE" ]; then
         if [ "$(stat $ORIGFILE | grep Uid)" = "$(stat $DUPLICATE | grep Uid)" ]; then
            diff --brief "$DUPLICATE" "$ORIGFILE" >/dev/null 2>/dev/null
            if [ $? = 0 ]; then # is the same, can be removed
               rm -v "$DUPLICATE"
               rmdir --ignore-fail-on-non-empty "$(dirname $DUPLICATE)"
            fi
         fi
      fi
   done
}

# change union target storage to $1
# work on union mount $2
#
union_target_set()
{
   rm -Rf "$1"
   mkdir -p "$1"
   mount -o remount,mod:$(cat /sys/fs/aufs/*/br0 | sed -r "s/=.*//")=ro none "$2" 2>/dev/null
   mount -o remount,add:0:"$1" none "$2"
}


function xpi_patch()
{
   local ZIP CWD TMPDIR

   ZIP="$(realpath "$1")"
   CWD="$(pwd)"
   TMPDIR=/tmp/xpi-patch

   rm -Rf "$TMPDIR"
   mkdir "$TMPDIR"
   cd "$TMPDIR"
   unzip "$ZIP"

   sed -r -i 's/em:id="langpack.*@firefox.mozilla.org"/em:id="langpack@firefox.mozilla.org"/' install.rdf
   mkdir -p defaults/preferences
   echo "pref(\"general.useragent.locale\", \"$2\");" > defaults/preferences/prefs.js

   if [ $? -eq 0 ]; then
      zip -0 -r new.zip *
      cat new.zip > "$ZIP"
   fi

   rm -Rf "$TMPDIR"
   cd "$CWD"
}



# setup union

modprobe aufs
mount -t tmpfs tmpfs $EMPTY
mount -t aufs -o xino="$EMPTY/.xino",br="$EMPTY" none "$UNION"

# install all packages for bundles

for i in $(ls -1 bundles | sort); do
   union_target_set /tmp/$i "$UNION"

   cat ./bundles/$i/pkglist | sed -r "s/#.*//" | egrep -v "^[[:space:]]*\$" | while read LINE; do
      SRC="$(echo "$LINE" | cut -d: -f 1)"
      PKG="$(echo "$LINE" | cut -d: -f 2)"

      if [ "$SRC" = "slackware" ]; then
         sinstall "$PKG" "$SLACKWARE" "$UNION"
      fi

      if [ "$SRC" = "slax" ]; then
         sinstall "$PKG" "$SLAX" "$UNION"
      fi
   done

   sh ./bundles/$i/doinst.sh "$UNION"
   cp -a ./bundles/$i/rootfs/* "$UNION"

   # update stuff so it is not needed during boot
   if [ -x $UNION/usr/bin/update-gtk-immodules ]; then
     chroot $UNION /usr/bin/update-gtk-immodules --verbose
   fi
   if [ -x $UNION/usr/bin/update-gdk-pixbuf-loaders ]; then
     chroot $UNION /usr/bin/update-gdk-pixbuf-loaders --verbose
   fi
   if [ -x $UNION/usr/bin/update-pango-querymodules ]; then
     chroot $UNION /usr/bin/update-pango-querymodules --verbose
   fi
   if [ -x $UNION/usr/bin/update-desktop-database ]; then
     chroot $UNION /usr/bin/update-desktop-database /usr/share/applications
   fi
   if [ -x $UNION/usr/bin/update-mime-database ]; then
     chroot $UNION /usr/bin/update-mime-database /usr/share/mime
   fi
   if [ -x $UNION/usr/bin/fc-cache ]; then
     chroot $UNION /usr/bin/fc-cache -f
   fi
   chroot $UNION /sbin/ldconfig
done

# make language bundles
if true; then
echo "Building language modules"
cat languages | while read LINE; do
   echo - $LINE
   NR="$(echo $LINE | cut -d : -f 1)"
   LOC="$(echo $LINE | cut -d : -f 2)"
   CODE="$(echo $LINE | cut -d : -f 3)"
   KEYBOARD="$(echo $LINE | cut -d : -f 4)"
   LANGUAGE="$(echo $LINE | cut -d : -f 5)"
   EXTRAPKG="$(echo $LINE | cut -d : -f 6-)"
   LANG=$(echo "/tmp/languages/$LANGUAGE" | tr " " "_" | tr -d "()" | tr "_" "-")  #"
   mkdir -p "$LANG"

   installpkg -root "$LANG" $L10NDIR/kde-l10n-$CODE-*

   for PKG in $EXTRAPKG; do
      sinstall "$PKG" "$SLACKWARE" "$LANG" >/dev/null 2>/dev/null
      sinstall "$PKG" "$SLAX" "$LANG" >/dev/null 2>/dev/null
   done

   # do some cleanups and package the module to SB
   rm -Rf $LANG/usr/share/doc 2>/dev/null
   rm -Rf $LANG/usr/share/apps 2>/dev/null
   rm -Rf $LANG/usr/doc 2>/dev/null
   rm -Rf $LANG/usr/man 2>/dev/null
   find $LANG | egrep "[.]ogg|[.]wav|[.]pmap" | xargs rm -f
   if [ "$(echo "$LANGUAGE" | grep @)" = "" ]; then rm -Rf $LANG/usr/share/locale/$CODE@*; fi
   rm -f $LANG/usr/share/locale/*/LC_MESSAGES{akregator.mo,analitza.mo,blogilo.mo,cantor.mo,drkonqi.mo,jovie.mo,kaddressbook-mobile.mo,kaddressbook.mo,kajongg.mo,kalarm.mo,kalzium.mo,kblackbox.mo,kbruch.mo,kcron.mo,kfloppy.mo,kgeography.mo,kget.mo,kgoldrunner.mo,kgpg.mo,khangman.mo,kig.mo,killbots.mo,kimagemapeditor.mo,kiten.mo,kleopatra.mo,klinkstatus.mo,kmail-mobile.mo,kmail.mo,kmailcvt.mo,kmouth.mo,kmplot.mo,knode.mo,kommander.mo,kompare.mo,kontact.mo,kopete.mo,korganizer.mo,ksirk.mo,ksirkskineditor.mo,kstars.mo,ktimetracker.mo,ktouch.mo,kturtle.mo,kubrick.mo,kwordquiz.mo,kxsconfig.mo,lancelot.mo,libakonadi.mo,libkdepim.mo,libkleopatra.mo,marble.mo,marble_qt.mo,parley.mo,rocs.mo,step.mo,step_qt.mo,umbrello.mo}

   mkdir -p $LANG/usr/lib$LIBSUFFIX/locale/
   mkdir -p $LANG/usr/lib$LIBSUFFIX/qt/translations
   mkdir -p $LANG/etc/profile.d/
   cp -a $UNION/usr/lib$LIBSUFFIX/qt/translations/*_$CODE.qm $LANG/usr/lib$LIBSUFFIX/qt/translations
   cp -a $UNION/usr/lib$LIBSUFFIX/locale/$LOC* $LANG/usr/lib$LIBSUFFIX/locale/ 2>/dev/null
   cat $UNION/etc/profile.d/lang.sh | sed -r "s/LANG=en_US/LANG=$LOC/" > $LANG/etc/profile.d/lang.sh
   chmod a+x $LANG/etc/profile.d/lang.sh

   mkdir -p $LANG/usr/share/locale/$CODE/LC_MESSAGES
   cp $UNION/usr/share/locale/$CODE/man $LANG/usr/share/locale/$CODE/
   cp $UNION/usr/share/locale/$CODE/LC_MESSAGES/{NetworkManager,gst-,gstreamer,libknetworkmanager,plasma_applet_networkmanagement,mc.,pidgin,xdg-user-dirs,xkeyboard-config}* $LANG/usr/share/locale/$CODE/LC_MESSAGES 2>/dev/null
   mkdir -p $LANG/usr/share/smplayer/translations
   cp $UNION/usr/share/smplayer/translations/smplayer_$CODE.qm $LANG/usr/share/smplayer/translations 2>/dev/null
   cp $UNION/usr/share/smplayer/translations/smplayer_$LOC.qm $LANG/usr/share/smplayer/translations 2>/dev/null

   mkdir -p $LANG/usr/share/i18n/locales
   cp $UNION/usr/share/i18n/locales/$LOC* $LANG/usr/share/i18n/locales

   mkdir -p $LANG/usr/share/locale/l10n/$KEYBOARD
   cp flags/$KEYBOARD.png $LANG/usr/share/locale/l10n/$KEYBOARD/flag.png

   mkdir -p $LANG/root/.kde/share/config
   cp $UNION/root/.kde/share/config/kdeglobals $LANG/root/.kde/share/config/
   echo -e "Country=$KEYBOARD\nLanguage=$CODE" >> $LANG/root/.kde/share/config/kdeglobals
   echo -e "[Layout]\nDisplayNames=,\nLayoutList=$KEYBOARD,us\nLayoutLoopCount=-1\nModel=pc101\nResetOldOptions=false\nShowFlag=true\nShowLabel=false\nShowLayoutIndicator=true\nShowSingle=false\nSwitchMode=Global\nUse=true" >$LANG/root/.kde/share/config/kxkbrc

   FF="$(echo $CODE | tr _ -)"
   TMPXPITGT=/tmp/lang.xpi
   cp $XPIDIR/$FF.xpi $TMPXPITGT
   if [ $? -ne 0 ]; then
      FF="$(echo $LOC | tr _ -)"
      cp $XPIDIR/$FF.xpi $TMPXPITGT
   fi

   if [ $? -eq 0 ]; then
      xpi_patch $TMPXPITGT $FF
      FFXPITGT=$LANG/root/.mozilla/firefox/$(ls -1 $UNION/root/.mozilla/firefox | grep default)/extensions/
      mkdir -p $FFXPITGT
      chmod 0600 $TMPXPITGT
      mv $TMPXPITGT $FFXPITGT/langpack@firefox.mozilla.org.xpi
   fi

   dir2sb $LANG "/tmp/$NR-$(basename $LANG).sb" 2>/dev/null >/dev/null
   rm -Rf $LANG
done
fi

umount "$UNION"
umount "$EMPTY"
rmdir "$UNION"
rmdir "$EMPTY"

# delete unneeded stuff
for i in $(ls -1 bundles | sort); do
   ./reduce /tmp/$i
   rm /tmp/$i.sb
done

# remove duplicites
for i in $(ls -1 bundles | sort); do
   for j in $(ls -1 bundles | sort); do
      if [ "$i" \< "$j" ]; then
         remove_duplicites /tmp/$i /tmp/$j
      fi
   done
done

# make squashfs images
for i in $(ls -1 bundles | sort); do
   mksquashfs /tmp/$i /tmp/$i.sb -comp xz -Xbcj x86 -b 512k
done
